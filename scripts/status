#!/usr/bin/env sh

# Log file path
LOGFILE="$HOME/.cache/dwm_status.log"

# Initialize
printf "$$" > ~/.cache/pidofbar
sec=0

# Function to fetch CPU load average
update_cpu() {
  cpu=$(awk '{print $1}' /proc/loadavg)
}

# Function to fetch used memory
update_memory() {
  memory=$(free -h | awk 'NR==2 {print $3}')
}

# Function to fetch current time in your timezone Europe/Stockholm
update_time() {
  time=$(TZ='Europe/Stockholm' date +"%I:%M %p %a %b %d, %Y")
}

# Function to fetch weather data only if internet is available
update_weather() {
  if ping -c 1 -W 1 8.8.8.8 >/dev/null 2>&1; then
    weather=$($HOME/DWM/scripts/OpWeatherinfo | tr -d '\n')  # Fetch and remove newlines
  else
    weather=""
  fi
}

# Function to fetch battery status and capacity
update_bat() {
  if [ -e /sys/class/power_supply/BAT0/capacity ]; then
    bat_capacity=$(< /sys/class/power_supply/BAT0/capacity)
    bat_status=$(< /sys/class/power_supply/BAT0/status)

    case $bat_capacity in
      100|9[0-9]) bat_icon="" ;;
      8[0-9]|7[0-9]) bat_icon="" ;;
      6[0-9]|5[0-9]) bat_icon="" ;;
      4[0-9]|3[0-9]) bat_icon="" ;;
      2[0-9]|1[0-9]|[0-9]) bat_icon="" ;;
    esac

    [ "$bat_status" = "Charging" ] && bat="🔌$bat_icon $bat_capacity%" || bat="🔋$bat_icon $bat_capacity%"
  else
    bat="Battery N/A"
  fi
}

# Function to fetch volume information and mute status
update_vol() {
  vol_info=$(pactl list sinks | awk '
    /^Sink / { sink = $2 }
    /State: RUNNING/ { running_sink = sink }
    $1 == "Volume:" {
      volumes[sink] = $5
      if (sink == running_sink) {
        running_volume = $5
      }
    }
    $1 == "Mute:" {
      mutes[sink] = $2
      if (sink == running_sink) {
        running_mute = $2
      }
    }
    END {
      if (running_sink) {
        if (running_mute == "yes" || running_volume == "0%") {
          print "🔇"  # Muted icon
        } else {
          print running_volume
        }
      } else {
        for (sink in volumes) {
          if (volumes[sink] != "100%") {
            if (mutes[sink] == "yes" || volumes[sink] == "0%") {
              print "🔇"  # Muted icon
            } else {
              print volumes[sink]
            }
            exit
          }
        }
      }
    }
  ')

  if [ "$vol_info" = "🔇" ]; then
    vol="🔇"
  else
    volume_percentage="${vol_info%\%}"
    if [ "$volume_percentage" -ge 75 ]; then
      vol="📢 $vol_info"  # High volume icon
    elif [ "$volume_percentage" -ge 50 ]; then
      vol="🔊 $vol_info"  # Medium volume icon
    elif [ "$volume_percentage" -ge 25 ]; then
      vol="🔉 $vol_info"  # Low volume icon
    else
      vol="🔈 $vol_info"  # Very low volume icon
    fi
  fi
}

# Function to fetch microphone mute status
update_mic() {
  mic_info=$($HOME/DWM/scripts/stmictst)
  mic=$(echo "$mic_info" | grep -q "unmuted" && echo "" || echo "󰍭")
}

# Function to fetch backlight status using xrandr
update_backlight() {
  output=$(xrandr --verbose | grep -m 1 -i brightness | awk '{print $2}')
  [ -n "$output" ] && backlight="☀$(awk "BEGIN {print int($output * 100)}")%" || backlight="Backlight N/A"
}

# Function to display status on dwm
display() {
  status=""

  [ -n "$cpu" ] && status+=" 󰻠 $cpu "
  [ -n "$memory" ] && status+="󰾆 $memory "
  [ -n "$weather" ] && status+="$weather "
  [ -n "$bat" ] && status+="$bat "
  [ -n "$backlight" ] && status+="$backlight "
  [ -n "$vol" ] && status+="$vol "
  [ -n "$mic" ] && status+="$mic "
  [ -n "$time" ] && status+="$time"

  xsetroot -name "$status"
}

# Signal handlers for updating specific parts of status
trap "update_vol; display" "RTMIN"
trap "update_backlight; display" "RTMIN+1"
trap "update_bat; display" "RTMIN+2"
trap "update_mic; display" "RTMIN+3"

# Initial updates
update_cpu
update_memory
update_time
update_weather
update_bat
update_backlight
update_vol
update_mic

# Initial display
display

# Main loop to continuously update and display status
while true; do
  sleep 1
  sec=$((sec + 1))

  case $((sec % 60)) in
    0) update_bat ;;
    5|10|15|20|25|30|35|40|45|50|55) update_cpu; update_memory ;;
  esac

  # Update weather every **20 minutes** (1200 seconds)
  [ $((sec % 1200)) -eq 0 ] && update_weather

  update_backlight
  update_vol
  update_time
  update_mic
  display
done

